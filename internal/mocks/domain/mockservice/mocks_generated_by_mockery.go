// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockservice

import (
	mock "github.com/stretchr/testify/mock"
)

// NewIMathService creates a new instance of IMathService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMathService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMathService {
	mock := &IMathService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IMathService is an autogenerated mock type for the IMathService type
type IMathService struct {
	mock.Mock
}

type IMathService_Expecter struct {
	mock *mock.Mock
}

func (_m *IMathService) EXPECT() *IMathService_Expecter {
	return &IMathService_Expecter{mock: &_m.Mock}
}

// FormatNumber provides a mock function for the type IMathService
func (_mock *IMathService) FormatNumber(num float64, base int) (string, error) {
	ret := _mock.Called(num, base)

	if len(ret) == 0 {
		panic("no return value specified for FormatNumber")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(float64, int) (string, error)); ok {
		return returnFunc(num, base)
	}
	if returnFunc, ok := ret.Get(0).(func(float64, int) string); ok {
		r0 = returnFunc(num, base)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(float64, int) error); ok {
		r1 = returnFunc(num, base)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IMathService_FormatNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatNumber'
type IMathService_FormatNumber_Call struct {
	*mock.Call
}

// FormatNumber is a helper method to define mock.On call
//   - num
//   - base
func (_e *IMathService_Expecter) FormatNumber(num interface{}, base interface{}) *IMathService_FormatNumber_Call {
	return &IMathService_FormatNumber_Call{Call: _e.mock.On("FormatNumber", num, base)}
}

func (_c *IMathService_FormatNumber_Call) Run(run func(num float64, base int)) *IMathService_FormatNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(int))
	})
	return _c
}

func (_c *IMathService_FormatNumber_Call) Return(s string, err error) *IMathService_FormatNumber_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *IMathService_FormatNumber_Call) RunAndReturn(run func(num float64, base int) (string, error)) *IMathService_FormatNumber_Call {
	_c.Call.Return(run)
	return _c
}

// Product provides a mock function for the type IMathService
func (_mock *IMathService) Product(numbers []float64) (float64, error) {
	ret := _mock.Called(numbers)

	if len(ret) == 0 {
		panic("no return value specified for Product")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]float64) (float64, error)); ok {
		return returnFunc(numbers)
	}
	if returnFunc, ok := ret.Get(0).(func([]float64) float64); ok {
		r0 = returnFunc(numbers)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func([]float64) error); ok {
		r1 = returnFunc(numbers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IMathService_Product_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Product'
type IMathService_Product_Call struct {
	*mock.Call
}

// Product is a helper method to define mock.On call
//   - numbers
func (_e *IMathService_Expecter) Product(numbers interface{}) *IMathService_Product_Call {
	return &IMathService_Product_Call{Call: _e.mock.On("Product", numbers)}
}

func (_c *IMathService_Product_Call) Run(run func(numbers []float64)) *IMathService_Product_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float64))
	})
	return _c
}

func (_c *IMathService_Product_Call) Return(f float64, err error) *IMathService_Product_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *IMathService_Product_Call) RunAndReturn(run func(numbers []float64) (float64, error)) *IMathService_Product_Call {
	_c.Call.Return(run)
	return _c
}

// Round provides a mock function for the type IMathService
func (_mock *IMathService) Round(num float64) float64 {
	ret := _mock.Called(num)

	if len(ret) == 0 {
		panic("no return value specified for Round")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func(float64) float64); ok {
		r0 = returnFunc(num)
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// IMathService_Round_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Round'
type IMathService_Round_Call struct {
	*mock.Call
}

// Round is a helper method to define mock.On call
//   - num
func (_e *IMathService_Expecter) Round(num interface{}) *IMathService_Round_Call {
	return &IMathService_Round_Call{Call: _e.mock.On("Round", num)}
}

func (_c *IMathService_Round_Call) Run(run func(num float64)) *IMathService_Round_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64))
	})
	return _c
}

func (_c *IMathService_Round_Call) Return(f float64) *IMathService_Round_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *IMathService_Round_Call) RunAndReturn(run func(num float64) float64) *IMathService_Round_Call {
	_c.Call.Return(run)
	return _c
}

// Sum provides a mock function for the type IMathService
func (_mock *IMathService) Sum(numbers []float64) float64 {
	ret := _mock.Called(numbers)

	if len(ret) == 0 {
		panic("no return value specified for Sum")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func([]float64) float64); ok {
		r0 = returnFunc(numbers)
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// IMathService_Sum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sum'
type IMathService_Sum_Call struct {
	*mock.Call
}

// Sum is a helper method to define mock.On call
//   - numbers
func (_e *IMathService_Expecter) Sum(numbers interface{}) *IMathService_Sum_Call {
	return &IMathService_Sum_Call{Call: _e.mock.On("Sum", numbers)}
}

func (_c *IMathService_Sum_Call) Run(run func(numbers []float64)) *IMathService_Sum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]float64))
	})
	return _c
}

func (_c *IMathService_Sum_Call) Return(f float64) *IMathService_Sum_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *IMathService_Sum_Call) RunAndReturn(run func(numbers []float64) float64) *IMathService_Sum_Call {
	_c.Call.Return(run)
	return _c
}
