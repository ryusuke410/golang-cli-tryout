// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIMathUseCase creates a new instance of MockIMathUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMathUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMathUseCase {
	mock := &MockIMathUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIMathUseCase is an autogenerated mock type for the IMathUseCase type
type MockIMathUseCase struct {
	mock.Mock
}

type MockIMathUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMathUseCase) EXPECT() *MockIMathUseCase_Expecter {
	return &MockIMathUseCase_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockIMathUseCase
func (_mock *MockIMathUseCase) Add(ctx context.Context, input *MathAddInput) (*MathAddOutput, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *MathAddOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *MathAddInput) (*MathAddOutput, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *MathAddInput) *MathAddOutput); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MathAddOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *MathAddInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIMathUseCase_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockIMathUseCase_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockIMathUseCase_Expecter) Add(ctx interface{}, input interface{}) *MockIMathUseCase_Add_Call {
	return &MockIMathUseCase_Add_Call{Call: _e.mock.On("Add", ctx, input)}
}

func (_c *MockIMathUseCase_Add_Call) Run(run func(ctx context.Context, input *MathAddInput)) *MockIMathUseCase_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MathAddInput))
	})
	return _c
}

func (_c *MockIMathUseCase_Add_Call) Return(mathAddOutput *MathAddOutput, err error) *MockIMathUseCase_Add_Call {
	_c.Call.Return(mathAddOutput, err)
	return _c
}

func (_c *MockIMathUseCase_Add_Call) RunAndReturn(run func(ctx context.Context, input *MathAddInput) (*MathAddOutput, error)) *MockIMathUseCase_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Multiply provides a mock function for the type MockIMathUseCase
func (_mock *MockIMathUseCase) Multiply(ctx context.Context, input *MathMultiplyInput) (*MathMultiplyOutput, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Multiply")
	}

	var r0 *MathMultiplyOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *MathMultiplyInput) (*MathMultiplyOutput, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *MathMultiplyInput) *MathMultiplyOutput); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MathMultiplyOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *MathMultiplyInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIMathUseCase_Multiply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Multiply'
type MockIMathUseCase_Multiply_Call struct {
	*mock.Call
}

// Multiply is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockIMathUseCase_Expecter) Multiply(ctx interface{}, input interface{}) *MockIMathUseCase_Multiply_Call {
	return &MockIMathUseCase_Multiply_Call{Call: _e.mock.On("Multiply", ctx, input)}
}

func (_c *MockIMathUseCase_Multiply_Call) Run(run func(ctx context.Context, input *MathMultiplyInput)) *MockIMathUseCase_Multiply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*MathMultiplyInput))
	})
	return _c
}

func (_c *MockIMathUseCase_Multiply_Call) Return(mathMultiplyOutput *MathMultiplyOutput, err error) *MockIMathUseCase_Multiply_Call {
	_c.Call.Return(mathMultiplyOutput, err)
	return _c
}

func (_c *MockIMathUseCase_Multiply_Call) RunAndReturn(run func(ctx context.Context, input *MathMultiplyInput) (*MathMultiplyOutput, error)) *MockIMathUseCase_Multiply_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockITransformUseCase creates a new instance of MockITransformUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockITransformUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockITransformUseCase {
	mock := &MockITransformUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockITransformUseCase is an autogenerated mock type for the ITransformUseCase type
type MockITransformUseCase struct {
	mock.Mock
}

type MockITransformUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITransformUseCase) EXPECT() *MockITransformUseCase_Expecter {
	return &MockITransformUseCase_Expecter{mock: &_m.Mock}
}

// Base64Encode provides a mock function for the type MockITransformUseCase
func (_mock *MockITransformUseCase) Base64Encode(ctx context.Context, input *TransformBase64Input) (*TransformBase64Output, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Base64Encode")
	}

	var r0 *TransformBase64Output
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransformBase64Input) (*TransformBase64Output, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransformBase64Input) *TransformBase64Output); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TransformBase64Output)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *TransformBase64Input) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockITransformUseCase_Base64Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Base64Encode'
type MockITransformUseCase_Base64Encode_Call struct {
	*mock.Call
}

// Base64Encode is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockITransformUseCase_Expecter) Base64Encode(ctx interface{}, input interface{}) *MockITransformUseCase_Base64Encode_Call {
	return &MockITransformUseCase_Base64Encode_Call{Call: _e.mock.On("Base64Encode", ctx, input)}
}

func (_c *MockITransformUseCase_Base64Encode_Call) Run(run func(ctx context.Context, input *TransformBase64Input)) *MockITransformUseCase_Base64Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*TransformBase64Input))
	})
	return _c
}

func (_c *MockITransformUseCase_Base64Encode_Call) Return(transformBase64Output *TransformBase64Output, err error) *MockITransformUseCase_Base64Encode_Call {
	_c.Call.Return(transformBase64Output, err)
	return _c
}

func (_c *MockITransformUseCase_Base64Encode_Call) RunAndReturn(run func(ctx context.Context, input *TransformBase64Input) (*TransformBase64Output, error)) *MockITransformUseCase_Base64Encode_Call {
	_c.Call.Return(run)
	return _c
}

// Escape provides a mock function for the type MockITransformUseCase
func (_mock *MockITransformUseCase) Escape(ctx context.Context, input *TransformEscapeInput) (*TransformEscapeOutput, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Escape")
	}

	var r0 *TransformEscapeOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransformEscapeInput) (*TransformEscapeOutput, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransformEscapeInput) *TransformEscapeOutput); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TransformEscapeOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *TransformEscapeInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockITransformUseCase_Escape_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Escape'
type MockITransformUseCase_Escape_Call struct {
	*mock.Call
}

// Escape is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockITransformUseCase_Expecter) Escape(ctx interface{}, input interface{}) *MockITransformUseCase_Escape_Call {
	return &MockITransformUseCase_Escape_Call{Call: _e.mock.On("Escape", ctx, input)}
}

func (_c *MockITransformUseCase_Escape_Call) Run(run func(ctx context.Context, input *TransformEscapeInput)) *MockITransformUseCase_Escape_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*TransformEscapeInput))
	})
	return _c
}

func (_c *MockITransformUseCase_Escape_Call) Return(transformEscapeOutput *TransformEscapeOutput, err error) *MockITransformUseCase_Escape_Call {
	_c.Call.Return(transformEscapeOutput, err)
	return _c
}

func (_c *MockITransformUseCase_Escape_Call) RunAndReturn(run func(ctx context.Context, input *TransformEscapeInput) (*TransformEscapeOutput, error)) *MockITransformUseCase_Escape_Call {
	_c.Call.Return(run)
	return _c
}

// UrlEncode provides a mock function for the type MockITransformUseCase
func (_mock *MockITransformUseCase) UrlEncode(ctx context.Context, input *TransformUrlEncodeInput) (*TransformUrlEncodeOutput, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UrlEncode")
	}

	var r0 *TransformUrlEncodeOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransformUrlEncodeInput) (*TransformUrlEncodeOutput, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *TransformUrlEncodeInput) *TransformUrlEncodeOutput); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TransformUrlEncodeOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *TransformUrlEncodeInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockITransformUseCase_UrlEncode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UrlEncode'
type MockITransformUseCase_UrlEncode_Call struct {
	*mock.Call
}

// UrlEncode is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockITransformUseCase_Expecter) UrlEncode(ctx interface{}, input interface{}) *MockITransformUseCase_UrlEncode_Call {
	return &MockITransformUseCase_UrlEncode_Call{Call: _e.mock.On("UrlEncode", ctx, input)}
}

func (_c *MockITransformUseCase_UrlEncode_Call) Run(run func(ctx context.Context, input *TransformUrlEncodeInput)) *MockITransformUseCase_UrlEncode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*TransformUrlEncodeInput))
	})
	return _c
}

func (_c *MockITransformUseCase_UrlEncode_Call) Return(transformUrlEncodeOutput *TransformUrlEncodeOutput, err error) *MockITransformUseCase_UrlEncode_Call {
	_c.Call.Return(transformUrlEncodeOutput, err)
	return _c
}

func (_c *MockITransformUseCase_UrlEncode_Call) RunAndReturn(run func(ctx context.Context, input *TransformUrlEncodeInput) (*TransformUrlEncodeOutput, error)) *MockITransformUseCase_UrlEncode_Call {
	_c.Call.Return(run)
	return _c
}
